<?php

/** @noinspection UnnecessaryCastingInspection */
/** @noinspection PhpUnnecessaryStringCastInspection */
/** @noinspection SpellCheckingInspection */
/** @noinspection PhpComposerExtensionStubsInspection */

/** @noinspection GlobalVariableUsageInspection */

namespace Dotlines\GhooriOnDemand\Tests;

use Dotenv\Dotenv;
use Dotlines\Ghoori\AccessTokenRequest;
use Dotlines\GhooriOnDemand\ChargeRequest;
use Dotlines\GhooriOnDemand\StatusRequest;
use Exception;
use GuzzleHttp\Exception\ClientException;
use PHPUnit\Framework\TestCase;

class StatusRequestTest extends TestCase
{
    protected $backupStaticAttributes = false;
    protected $runTestInSeparateProcess = false;

    public string $serverUrl = '';
    public string $tokenUrl = '';
    public string $username = '';
    public string $password = '';
    public int $clientID = 0;
    public string $clientSecret = '';

    public string $accessToken = "";
    public string $chargeUrl = "";
    public string $package = "";
    public string $callBackURL = "";
    public string $details = "";
    public string $mobile = ''; //optional
    public string $email = ''; //optional
    public string $reference = ''; //optional
    public string $orderID = "";
    public int $amount = 0;

    public string $statusUrl = "";


    /**
     * @throws Exception
     */
    final public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Dotenv::createImmutable(__DIR__ . '\\..')->safeLoad();

        $this->serverUrl = (array_key_exists('GHOORI_SERVER_URL', $_ENV) ? (string)$_ENV['GHOORI_SERVER_URL'] : (string)getenv('GHOORI_SERVER_URL'));
        $this->tokenUrl = $this->serverUrl . '/oauth/token';
        $this->username = array_key_exists('GHOORI_USERNAME', $_ENV) ? (string)$_ENV['GHOORI_USERNAME'] : (string)getenv('GHOORI_USERNAME');
        $this->password = array_key_exists('GHOORI_PASSWORD', $_ENV) ? (string)$_ENV['GHOORI_PASSWORD'] : (string)getenv('GHOORI_PASSWORD');
        $this->clientID = array_key_exists('GHOORI_CLIENT_ID', $_ENV) ? (int)$_ENV['GHOORI_CLIENT_ID'] : (int)getenv('GHOORI_CLIENT_ID');
        $this->clientSecret = array_key_exists('GHOORI_CLIENT_SECRET', $_ENV) ? (string)$_ENV['GHOORI_CLIENT_SECRET'] : (string)getenv('GHOORI_CLIENT_SECRET');

        $accessTokenRequest = AccessTokenRequest::getInstance($this->tokenUrl, $this->username, $this->password, $this->clientID, $this->clientSecret);
        $tokenResponse = $accessTokenRequest->send();

        $this->accessToken = (string)$tokenResponse['access_token'];

        $this->chargeUrl = $this->serverUrl . "/api/v2.0/charge";
        $this->package = 'BBC_Janala_Course1';
        $this->callBackURL = 'https://test-app.local';
        $this->details = 'Test Transaction'; //optional

        $this->statusUrl = 'https://sb-payments.ghoori.com.bd/api/v2.0/status' ;
        $this->orderID = 'test-app-' . random_int(111111, 999999);
        $this->amount = random_int(10, 100);
    }

    /**
     * @test
     * @throws Exception
     */
    final public function it_can_fetch_status(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);

        $chargeResponse = $chargeRequest->send();

        $spTransID = (string)$chargeResponse['spTransID'];
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $statusResponse = $statusRequest->send();

        self::assertNotEmpty($statusResponse);
        self::assertArrayHasKey('processingStatus', $statusResponse);
        self::assertArrayHasKey('status', $statusResponse);
        self::assertArrayHasKey('amount', $statusResponse);
        self::assertArrayHasKey('errorCode', $statusResponse);
        self::assertArrayHasKey('errorMessage', $statusResponse);
        self::assertArrayHasKey('bKashTransID', $statusResponse);
        self::assertArrayHasKey('reference', $statusResponse);
        self::assertArrayHasKey('surcharges', $statusResponse);
        self::assertNotEmpty($statusResponse['processingStatus']);
        self::assertNotEmpty($statusResponse['status']);
        self::assertNotEmpty($statusResponse['amount']);
    }

    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_exception_with_empty_statusUrl(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);

        $chargeResponse = $chargeRequest->send();

        $spTransID = (string)$chargeResponse['spTransID'];
        $this->statusUrl = "";
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $this->expectException(Exception::class);
        $statusRequest->send();
    }

    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_exception_with_invalid_statusUrl(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);

        $chargeResponse = $chargeRequest->send();

        $spTransID = (string)$chargeResponse['spTransID'];
        $this->statusUrl = "https://sb-payments.ghoori.com.bd/api/v2.0/status/wrong";
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $this->expectException(ClientException::class);
        $statusRequest->send();
    }

    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_exception_with_invalid_accessToken(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);

        $chargeResponse = $chargeRequest->send();

        $spTransID = (string)$chargeResponse['spTransID'];
        $this->accessToken = "ahsduhefasllishduekfhsfuieulandshksfk";
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $this->expectException(ClientException::class);
        $statusRequest->send();
    }


    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_error_with_invalid_clientID(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);
        $chargeResponse = $chargeRequest->send();
        $spTransID = (string)$chargeResponse['spTransID'];
        $this->clientID = 99999;
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $statusResponse = $statusRequest->send();

        self::assertNotEmpty($statusResponse);
        self::assertArrayNotHasKey('processingStatus', $statusResponse);
        self::assertArrayNotHasKey('status', $statusResponse);
        self::assertArrayNotHasKey('amount', $statusResponse);
        self::assertArrayHasKey('errorCode', $statusResponse);
        self::assertArrayHasKey('errorMessage', $statusResponse);
        self::assertArrayNotHasKey('bKashTransID', $statusResponse);
        self::assertArrayNotHasKey('reference', $statusResponse);
        self::assertArrayNotHasKey('surcharges', $statusResponse);

        self::assertNotEquals("00", $statusResponse['errorCode']);
    }



    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_error_with_empty_spTransID(): void
    {
        $spTransID = "";
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $statusResponse = $statusRequest->send();

        self::assertNotEmpty($statusResponse);
        self::assertArrayNotHasKey('processingStatus', $statusResponse);
        self::assertArrayNotHasKey('status', $statusResponse);
        self::assertArrayNotHasKey('amount', $statusResponse);
        self::assertArrayHasKey('errorCode', $statusResponse);
        self::assertArrayHasKey('errorMessage', $statusResponse);
        self::assertArrayNotHasKey('bKashTransID', $statusResponse);
        self::assertArrayNotHasKey('reference', $statusResponse);
        self::assertArrayNotHasKey('surcharges', $statusResponse);

        self::assertNotEquals("00", $statusResponse['errorCode']);
    }

    /**
     * @test
     * @throws Exception
     */
    final public function it_gets_error_with_invalid_spTransID(): void
    {
        $chargeRequest = ChargeRequest::getInstance($this->chargeUrl, $this->accessToken, $this->clientID, $this->orderID, $this->package, $this->amount, $this->callBackURL, $this->details, $this->mobile, $this->email, $this->reference);
        $chargeResponse = $chargeRequest->send();
        $spTransID = "YU" . (string)$chargeResponse['spTransID'];
        $statusRequest = StatusRequest::getInstance($this->statusUrl, $this->accessToken, $this->clientID, $spTransID);
        $statusResponse = $statusRequest->send();

        self::assertNotEmpty($statusResponse);
        self::assertArrayHasKey('processingStatus', $statusResponse);
        self::assertArrayHasKey('status', $statusResponse);
        self::assertArrayHasKey('amount', $statusResponse);
        self::assertArrayHasKey('errorCode', $statusResponse);
        self::assertArrayHasKey('errorMessage', $statusResponse);
        self::assertArrayHasKey('bKashTransID', $statusResponse);
        self::assertArrayHasKey('reference', $statusResponse);
        self::assertArrayNotHasKey('surcharges', $statusResponse);

        self::assertNotEquals("00", $statusResponse['errorCode']);
    }
}
